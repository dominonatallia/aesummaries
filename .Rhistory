xaxis = list(
range = c(xmin, xmax),
tickmode = "array",
tickvals = sepby,
ticktext = sepby
)
)
empty_plot <- function(message = "No data available for these values") {
g_plot <- ggplot() +
theme_void()
fig <- plotly::ggplotly(g_plot, height = 200) %>%
plotly::add_annotations(
text = message,
x = 1,
y = 1,
xref = "paper",
yref = "paper",
showarrow = FALSE
) %>%
plotly::layout(
xaxis = list(visible = FALSE), yaxis = list(visible = FALSE)
)
return(list(plot = g_plot, ptly = fig))
}
cm_int <- interval_plot(
datain = datain[["CM"]],
startvar = "CMSTDY",
endvar = "CMENDY",
yvar = "CMTRT",
seriesvar = "CMCLAS",
subjectid = subjectid,
series_color = NA,
yaxislab = "Drug/Med/Therapy"
)
rangeae <- layer_scales(ae_int$plot)$y$range$range
rangecm <- layer_scales(cm_int$plot)$y$range$range
xmin <- floor(min(rangeae, rangecm) / 5) * 5
xmax <- ceiling(max(rangeae, rangecm) / 5) * 5
sepby <- as.integer(seq(xmin, xmax, by = ceiling((xmax - xmin) / 10)))
cm_int$ptly
plotly::subplot(ae_int$ptly, cm_int$ptly,
shareX = TRUE, nrows = 2,
titleX = TRUE, titleY = TRUE, margin = 0.005
) %>%
plotly::layout(
height = 600,
width = 800,
xaxis = list(
range = c(xmin, xmax),
tickmode = "array",
tickvals = sepby,
ticktext = sepby
)
)
ae_int$ptly
cm_int$ptly
plotly::subplot(ae_int$ptly, cm_int$ptly,
shareX = TRUE, nrows = 2,
titleX = TRUE, titleY = TRUE, margin = 0.005
)
plotly::subplot(ae_int$ptly, cm_int$ptly,
shareX = FALSE, nrows = 2,
titleX = TRUE, titleY = TRUE, margin = 0.005
)
plotly::subplot(ae_int$ptly, cm_int$ptly,
shareX = FALSE, nrows = 2,
titleX = TRUE, titleY = TRUE, margin = 0.005
) %>%
plotly::layout(
height = 600,
width = 800,
xaxis = list(
range = c(xmin, xmax),
tickmode = "array",
tickvals = sepby,
ticktext = sepby
)
)
empty_plot <- function(message = "No data available for these values") {
g_plot <- ggplot() +
theme_void()
fig <- plotly::ggplotly(g_plot, height = 200) %>%
plotly::add_annotations(
text = message,
x = 1,
y = 1,
showarrow = FALSE
) %>%
plotly::layout(
xaxis = list(visible = FALSE), yaxis = list(visible = FALSE)
)
return(list(plot = g_plot, ptly = fig))
}
("CM" %in% names(datain)) && (!is.null(datain$CM))
cm_int <- interval_plot(
datain = datain[["CM"]],
startvar = "CMSTDY",
endvar = "CMENDY",
yvar = "CMTRT",
seriesvar = "CMCLAS",
subjectid = subjectid,
series_color = NA,
yaxislab = "Drug/Med/Therapy"
)
# Identify Axis range for combined plot
rangeae <- layer_scales(ae_int$plot)$y$range$range
rangecm <- layer_scales(cm_int$plot)$y$range$range
xmin <- floor(min(rangeae, rangecm) / 5) * 5
xmax <- ceiling(max(rangeae, rangecm) / 5) * 5
sepby <- as.integer(seq(xmin, xmax, by = ceiling((xmax - xmin) / 10)))
plotly::subplot(ae_int$ptly, cm_int$ptly,
shareX = TRUE, nrows = 2,
titleX = TRUE, titleY = TRUE, margin = 0.005
) %>%
plotly::layout(
height = 600,
width = 800,
xaxis = list(
range = c(xmin, xmax),
tickmode = "array",
tickvals = sepby,
ticktext = sepby
)
)
shiny::runApp()
plotly::subplot(ae_int$ptly, cm_int$ptly,
shareX = TRUE, nrows = 2,
titleX = TRUE, titleY = TRUE, margin = 0.005
) %>%
plotly::layout(
height = 600,
width = 800,
xaxis = list(
range = c(xmin, xmax),
tickmode = "array",
tickvals = sepby,
ticktext = sepby
)
)
cm_int$ptly
p1 <- cm_int$ptly
View(p1)
gc()
gc()
shiny::runApp()
shiny::runApp()
gc()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
lintr::lint_package()
devtools::check_man()
shiny::runApp()
golem::add_module("plot_profile")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
datain
gc()
shiny::runApp()
datain
gc()
shiny::runApp()
adam_read()
adam_read() -> df
View(df)
adam_read()$adam
shiny::runApp()
names(adam_read()$adam)
names(adam_read()$adam$adae)
adam_read()$adam_attrib
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
domain()
sourcedata()
sourcedata()[[domain()]]
shiny::runApp()
sourcedata()[[domain()]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
sourcedata()
domain()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rv$sourcedata()
shiny::runApp()
shiny::runApp()
rv$sourcedata()
shiny::runApp()
rv$sourcedata
rv$sourcedata()
shiny::runApp()
shiny::runApp()
rv$sourcedata
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
styler::style_pkg()
gc()
styler::style_pkg()
shiny::runApp()
styler::style_pkg()
shiny::runApp()
lintr::lint_package()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
gc()
shiny::runApp()
shiny::runApp()
devtools::check()
shiny::runApp()
renv::status()
renv::snapshot()
renv::restore()
renv::restore()
renv::restore()
renv::status()
renv::dependencies()
renv::status()
remove.packages("shinydashboard")
renv::status()
renv::dependencies()
renv::dependencies()
renv::snapshot()
renv::snapshot(exclude = "cvars")
remove.packages("cvars")
packageVersion("rsconnect")
remove.packages("gert")
renv::restore()
remove.packages("gert")
renv::purge("gert")
renv::restore()
renv::restore()
remove.packages("gert")
renv::install("gert@1.9.2")
renv::snapshot()
library(shiny)
library(shiny)
detach("package:shiny", unload = TRUE)
usethis::use_package("dplyr", min_version = TRUE)
usethis::use_package("flextable", min_version = TRUE)
usethis::use_package("ggplot2", min_version = TRUE)
usethis::use_package("golem", min_version = TRUE)
usethis::use_package("officer", min_version = TRUE)
usethis::use_package("scales", min_version = TRUE)
usethis::use_package("shiny", min_version = TRUE)
usethis::use_package("shinyjs", min_version = TRUE)
usethis::use_package("shinyWidgets", min_version = TRUE)
usethis::use_package("stringr", min_version = TRUE)
usethis::use_package("tibble", min_version = TRUE)
usethis::use_build_ignore("rsconnect")
usethis::use_git_ignore("rsconnect")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(event)
test <- rv$goutput$rpt_data
trt_level_diff <- length(levels(test$TRTVAR)) - length(unique(test$TRTVAR))
test <- test %>%
mutate(point_n = as.numeric(as.factor(TRTVAR)) - trt_level_diff)
View(test)
test <- rv$goutput
View(test)
event$curveNumber
repName()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
View(out)
devtools::test_active_file()
gc()
devtools::test_coverage_active_file()
devtools::test_active_file()
View(out)
out$ptly
out <- interval_plot(
datain = adae,
startvar = "ASTDY",
endvar = "AENDY",
yvar = "AETERM",
seriesvar = "AESEV1",
subjectid = "01-701-1302",
series_color = NA,
yaxislab = "Reported Term for the Adverse Event"
)
out$ptly
View(out)
out[["rpt_data"]][["TOTAL"]]
gc()
devtools::test_active_file()
devtools::test_coverage_active_file()
data(adae)
data(cm)
multi_interval(
datain = list(AE = adae, CM = cm),
subjectid = "01-701-1275"
)$ptly
gc()
devtools::load_all(".")
usethis::use_test("multi_interval")
devtools::test_active_file()
devtools::test_active_file()
nrow(out$rpt_data)
expect_equal(unique(out$rpt_data$USUBJID), "01-701-1302")
expect_true(all(!is.na(complete_stat$ASTDY)))
complete_stat <- out$rpt_data %>%
filter(Status == "Complete")
expect_true(all(!is.na(complete_stat$ASTDY)))
View(complete_stat)
out$ptly
out$title
expect_equal(out$title, "Events over Study Period for Participant: 01-701-1302\n; Age: 61; Sex: M; Race: WHITE") #nolint
View(out)
expect_true(c("CMSTDY", "CMENDY", "CMTRT", "CMCLAS" %in% names(out$rpt_data)))
expect_true(c("CMSTDY", "CMENDY", "CMTRT", "CMCLAS") %in% names(out$rpt_data))
expect_true(all(c("CMSTDY", "CMENDY", "CMTRT", "CMCLAS") %in% names(out$rpt_data)))
out[["ptly"]][["x"]][["subplot"]]
expect_true(out[["ptly"]][["x"]][["subplot"]])
devtools::test_active_file()
devtools::test_coverage_active_file()
adae$USUBJID
adae$USUBJID %>% unique()
devtools::test_active_file()
expect_true(nrow(out$rpt_data) > 0)
expect_equal(unique(out$rpt_data$USUBJID), "01-703-1299")
expect_equal(out$title, "Events over Study Period for Participant: 01-703-1299\n; Age: 61; Sex: M; Race: WHITE")
expect_equal(out$title, "Events over Study Period for Participant: 01-703-1299\n; Age: 81; Sex: F; Race: WHITE") #nolint
out$ptly
View(out)
out[["ptly"]][["x"]][["data"]][[4]][["text"]]
expect_equal(out[["ptly"]][["x"]][["data"]][[4]][["text"]], "No data for this participant/period")
expect_true(out[["ptly"]][["x"]][["subplot"]])
expect_true(all(is.na(out$rpt_data$CMDECOD)))
devtools::test_active_file()
devtools::test_coverage_active_file()
devtools::test_active_file()
out$ptly
expect_true(nrow(out$rpt_data) > 0)
nrow(out$rpt_data)
expect_null(nrow(out$rpt_data))
View(out)
expect_true(out[["ptly"]][["x"]][["subplot"]])
expect_null(out[["ptly"]][["x"]][["subplot"]])
View(out)
out[["ptly"]][["x"]][["data"]][[1]][["text"]]
expect_equal(out[["ptly"]][["x"]][["data"]][[1]][["text"]], "No AE data available")
devtools::test_active_file()
devtools::test_coverage_active_file()
styler::style_pkg()
lintr::lint_package()
usethis::use_description()
usethis::use_package("admiral")
usethis::use_package("admiral", min_version = TRUE)
usethis::use_package("DT", type = "suggests")
usethis::use_package("DT", type = "suggests", min_version = TRUE)
usethis::use_import_from("plotly", "layout")
data(adae)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tooltip()
?bs4Dash::addTooltip()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input$theme_switch
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
styler::style_pkg()
shiny::runApp()
shiny::runApp()
lintr::lint_package()
devtools::check()
styler::style_pkg()
shiny::runApp()
shiny::runApp()
styler::style_pkg()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
styler::style_pkg()
lintr::lint_package()
usethis::use_package("waiter", type = "suggests")
devtools::check()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
NS()
?NS()
NS("aqe")
shiny::runApp()
shiny::runApp()
devtools::test_active_file()
shiny::runApp()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
shiny::runApp()
shiny::runApp()
View(statistics_data)
statistics_data %>%
group_by() %>%
filter(ADJPVALUE <= pvalcut) %>%
arrange(desc(ADJPVALUE))
?p.adjust()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
gc()
gc()
shiny::runApp()
gc()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
styler::style_pkg()
lintr::lint_package()
lintr::lint_package()
devtools::check()
?format()
format(1, justify = "centre")
?cat()
packageVersion("httpuv")
packageVersion("rsconnect")
shiny::runApp()
shiny::runApp()
?recode()
devtools::document()
devtools::load_all(".")
?cvars::add()
devtools::document()
devtools::load_all(".")
?cvars::add()
?cvars::mcatstat()
devtools::document()
?cvars::add_var()
devtools::document()
?cvars::add_var()
cvars::add_var(1,1)
add_var(10, 1)
devtools::document()
?cvars::add_var()
devtools::document()
?cvars::mult_var()
devtools::document()
?cvars::div_var()
usethis::use_r("test_new")
div_var(3.5)
div_var(3, 5)
renv::status()
renv::snapshot(exclude='cvars')
renv::restore()
renv::snapshot(exclude='cvars')
renv::snapshot(exclude='cvars')
renv::status()
